--- The memoryrecord objects are the entries you see in the addresslist.
--
-- @classmod MemoryRecord Class:


--- Unique ID.
--
-- @prop ID
-- @ptype integer

--- The index ID for this record. 0 is top. (ReadOnly)
--
-- @prop Index
-- @ptype integer

--- The description of the memory record.
--
-- @prop Description
-- @ptype string

--- Get/set the interpretable address string.
-- Useful for simple address settings.
--
-- @prop Address
-- @ptype string

--- Get the address string shown in CE (ReadOnly).
--
-- @prop AddressString
-- @ptype string

--- The number of offsets.
-- Set to 0 for a normal address.
--
-- @prop OffsetCount
-- @ptype integer

--- Array to access each offset.
--
-- @prop Offset
-- @ptype array
-- @treturn integer

--- Array to access each offset using the interpretable text style.
--
-- @prop OffsetText
-- @ptype array
-- @treturn string

---
--
-- @prop CurrentAddress: integer - The address the memoryrecord points to

--- The variable type of this record.
--
-- See vtByte to vtCustom.
--
-- @prop VarType
-- @ptype ValueType (string)

--- The variable type of this record.
--
-- See vtByte to vtCustom.
--    If the type is vtString then the following properties are available:
--     String.Size: Number of characters in the string
--     String.Unicode: boolean
--     String.Codepage: boolean
--
--    If the type is vtBinary then the following properties are available
--      Binary.Startbit: First bit to start reading from
--      Binary.Size : Number of bits
--
--    If the type is vtByteArray then the following properties are available
--      Aob.Size : Number of bytes
--
-- @prop Type: ValueType (number)


--- If the type is vtCustom this will contain the name of the CustomType.
--
-- @prop CustomTypeName
-- @ptype string

--- If the type is vtAutoAssembler this will contain the auto assembler script.
--
-- @prop Script
-- @ptype string

--- The value in stringform.
--
-- @prop Value
-- @ptype string

---
--
-- @prop Selected: boolean - Set to true if selected (ReadOnly)

--- Set to true to activate/freeze, false to deactivate/unfreeze.
--
-- @prop Active
-- @ptype boolean

---
--
-- @prop Color
-- @ptype integer

--- Self explanatory.
--
-- @prop ShowAsHex
-- @ptype boolean

--- Self explanatory.
--
-- @prop ShowAsSigned
-- @ptype boolean

--- Allow value increasing, unfreeze will reset it to false.
--
-- @prop AllowIncrease
-- @ptype boolean

--- Allow value decreasing, unfreeze will reset it to false.
--
-- @prop AllowDecrease
-- @ptype boolean

--- Set to true to collapse this record or false to expand it.
-- Use expand/collapse methods for recursive operations.
--
-- @prop Collapsed
-- @ptype boolean

--- Set to true if the record was created as a Group Header with no address or value info. (ReadOnly)
--
-- @prop IsGroupHeader
-- @ptype boolean

--- Set to false if record contains an unreadable address. (ReadOnly)
--
-- NOTE: This property will not be set until the value property is accessed at least once.
--
-- @prop IsReadable
-- @ptype boolean

--- A string enclosed by square brackets filled with the options seperated by a comma.
-- Valid options are: moHideChildren, moActivateChildrenAsWell, moDeactivateChildrenAsWell, moRecursiveSetValue, moAllowManualCollapseAndExpand, moManualExpandCollapse.
--
-- @prop Options
-- @ptype String set

--- If dropdown list refers to list of another memory record eg. (memrec name).
--
-- @prop DropDownLinked
-- @ptype boolean

--- Description of linked memrec or emptystring if not linked.
--
-- @prop DropDownLinkedMemrec
-- @ptype string

--- List of "value:description" lines, lists are still separate objects when linked, read-write.
--
-- @prop DropDownList
-- @ptype StringList

--- `true` if 'Disallow manual user input' is set.
--
-- @prop DropDownReadOnly
-- @ptype boolean

--- Self explanatory.
--
-- @prop DropDownDescriptionOnly
-- @ptype boolean

--- Self explanatory.
--
-- @prop DisplayAsDropDownListItem
-- @ptype boolean

---
--
-- Equivalent to [DropDownList.Count](#MemoryRecord.DropDownList)
--
-- @prop DropDownCount
-- @ptype integer

---
--
-- @prop DropDownValue[index] : Array to access values in DropDownList (ReadOnly)

--- Array to access Descriptions in DropDownList (ReadOnly).
--
-- @prop DropDownDescription
-- @idx index
-- @ptype array
-- @treturn string

--- Number of children.
--
-- @prop Count
-- @ptype integer

--- Array to access the child records.
--
-- @prop Child
-- @idx index
-- @ptype array
-- @return MemoryRecord

---
--
-- Same as  [Child](#MemoryRecord.Child)
--
-- @prop FIXME
-- @idx index
-- @ptype array
-- @return MemoryRecord

--- Self explanatory.
--
-- @prop Parent
-- @ptype MemoryRecord

--- Number of hotkeys attached to this memory record.
--
-- @prop HotkeyCount
-- @ptype integer

--- Array to index the hotkeys.
--
-- @prop Hotkey
-- @ptype array
-- @treturn MemoryRecordHotkey

--- Set to true if activating this entry will be asynchronious.
--
-- (only for AA/Lua scripts)
--
-- @prop Async
-- @ptype boolean

--- True when async is true and it's being processed.
--
-- @prop AsyncProcessing
-- @ptype boolean

--- The time that it has been processing in milliseconds.
--
-- @prop AsyncProcessingTime
-- @ptype qword

--- The function to call when the memoryrecord will change (or changed) Active to true.
-- If before is true, not returning true will cause the activation to stop.
--
-- @prop OnActivate
-- @ptype function
-- @treturn boolean
-- @usage MemoryRecord.OnActivate = function(memoryrecord, before, currentstate)

--- The function to call when the memoryrecord will change (or changed) Active to false.
-- If before is true, not returning true will cause the deactivation to stop.
--
-- @prop OnDeactivate
-- @ptype function
-- @treturn boolean
-- @usage MemoryRecord.OnDeactivate = function(memoryrecord, before, currentstate)

--- Called when the memoryrecord is destroyed.
--
-- @prop OnDestroy
-- @ptype function
-- @usage MemoryRecord.OnDestroy = function()

--- This function gets called when rendering the value of a memory record.
-- Return true and a new string to override the value shown
--
-- @prop OnGetDisplayValue
-- @ptype function
-- @return table[boolean, string]
-- @usage MemoryRecord.OnGetDisplayValue = function(memoryrecord, valuestring)

--- Don't save this memoryrecord and it's children.
--
-- @prop DontSave
-- @ptype boolean


---
--
-- @function getDescription
-- @treturn string

---
--
-- @function setDescription

--- Returns the interpretable addressstring of this record.
-- If it is a pointer, it returns a second result as a table filled with the offsets.
--
-- @function getAddress
-- @treturn string
-- @treturn table

--- Sets the interpretable address string, and if offsets are provided make it a pointer.
--
-- @function setAddress
-- @tparam string address


--- Returns the number of offsets for this memoryrecord.
--
-- @function getOffsetCount
-- @treturn integer

--- Lets you set the number of offsets.
--
-- @function setOffsetCount
-- @tparam integer count

--- Gets the offset at the given index.
--
-- @function getOffset
-- @tparam integer index

--- Sets the offset at the given index.
--
-- @function setOffset
-- @tparam integer index
-- @param value

--- Returns the current address as an integer.
--
-- (the final result of the interpretable address and pointer offsets)
--
-- @function getCurrentAddress
-- @treturn integer

--- Appends the current memory record to the given memory record.
--
-- @function appendToEntry
-- @tparam MemoryRecord memrec

--- Returns the hotkey from the hotkey array.
--
-- @function getHotkey
-- @tparam integer index
-- @treturn MemoryRecordHotkey

--- Returns the hotkey with the given id.
--
-- @function getHotkeyByID
-- @tparam integer id
-- @treturn MemoryRecordHotkey

---
--
-- @function reinterpret

--- Returns a hotkey object.
--
-- @function createHotkey
-- @tparam table keys
-- @param action
-- @param[opt] value
-- @treturn MemoryRecordHotkey

--- Sets the entry to disabled without executing the disable section.
--
-- @function disableWithoutExecute
