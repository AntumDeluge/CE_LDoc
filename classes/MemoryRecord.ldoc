--- The memoryrecord objects are the entries you see in the addresslist.
--
-- @classmod MemoryRecord Class:


---
--
-- @prop ID: Integer - Unique ID

---
--
-- @prop Index: Integer - The index ID for this record. 0 is top. (ReadOnly)

---
--
-- @prop Description: string- The description of the memory record

---
--
-- @prop Address: string - Get/set the interpretable address string. Useful for simple address settings.

---
--
-- @prop AddressString: string - Get the address string shown in CE (ReadOnly)

---
--
-- @prop OffsetCount: integer - The number of offsets. Set to 0 for a normal address

---
--
-- @prop Offset[] : integer - Array to access each offset

---
--
-- @prop OffsetText[] : string - Array to access each offset using the interpretable text style

---
--
-- @prop CurrentAddress: integer - The address the memoryrecord points to

---
--
-- @prop VarType: ValueType (string) - The variable type of this record. See vtByte to vtCustom

---
--
-- @prop Type: ValueType (number) - The variable type of this record. See vtByte to vtCustom
    If the type is vtString then the following properties are available:
     String.Size: Number of characters in the string
     String.Unicode: boolean
     String.Codepage: boolean

    If the type is vtBinary then the following properties are available
      Binary.Startbit: First bit to start reading from
      Binary.Size : Number of bits

    If the type is vtByteArray then the following properties are available
      Aob.Size : Number of bytes


---
--
-- @prop CustomTypeName: String - If the type is vtCustom this will contain the name of the CustomType

---
--
-- @prop Script: String - If the type is vtAutoAssembler this will contain the auto assembler script

---
--
-- @prop Value: string - The value in stringform.

---
--
-- @prop Selected: boolean - Set to true if selected (ReadOnly)

---
--
-- @prop Active: boolean - Set to true to activate/freeze, false to deactivate/unfreeze

---
--
-- @prop Color: integer

---
--
-- @prop ShowAsHex: boolean - Self explanatory

---
--
-- @prop ShowAsSigned: boolean - Self explanatory

---
--
-- @prop AllowIncrease: boolean - Allow value increasing, unfreeze will reset it to false

---
--
-- @prop AllowDecrease: boolean - Allow value decreasing, unfreeze will reset it to false

---
--
-- @prop Collapsed: boolean - Set to true to collapse this record or false to expand it. Use expand/collapse methods for recursive operations.

---
--
-- @prop IsGroupHeader: boolean - Set to true if the record was created as a Group Header with no address or value info. (ReadOnly)

---
--
-- @prop IsReadable: boolean - Set to false if record contains an unreadable address. NOTE: This property will not be set until the value property is accessed at least once. (ReadOnly)

---
--
-- @prop Options: String set - a string enclosed by square brackets filled with the options seperated by a comma. Valid options are: moHideChildren, moActivateChildrenAsWell, moDeactivateChildrenAsWell, moRecursiveSetValue, moAllowManualCollapseAndExpand, moManualExpandCollapse

---
--
-- @prop DropDownLinked: boolean - if dropdown list refers to list of another memory record eg. (memrec name)

---
--
-- @prop DropDownLinkedMemrec: string - Description of linked memrec or emptystring if not linked

---
--
-- @prop DropDownList : StringList - list of "value:description" lines, lists are still separate objects when linked, read-write

---
--
-- @prop DropDownReadOnly: boolean - true if 'Disallow manual user input' is set

---
--
-- @prop DropDownDescriptionOnly: boolean - self explanatory

---
--
-- @prop DisplayAsDropDownListItem: boolean - self explanatory

---
--
-- @prop DropDownCount: integer - equivalent to .DropDownList.Count

---
--
-- @prop DropDownValue[index] : Array to access values in DropDownList (ReadOnly)

---
--
-- @prop DropDownDescription[index] : Array to access Descriptions in DropDownList (ReadOnly)

---
--
-- @prop Count: Number of children

---
--
-- @prop Child[index] : Array to access the child records

---
--
-- @prop [index] = Child[index]

---
--
-- @prop Parent: MemoryRecord - self explanatory

---
--
-- @prop HotkeyCount: integer - Number of hotkeys attached to this memory record

---
--
-- @prop Hotkey[] : Array to index the hotkeys

---
--
-- @prop Async: Boolean - Set to true if activating this entry will be asynchronious. (only for AA/Lua scripts)

---
--
-- @prop AsyncProcessing: Boolean - True when async is true and it's being processed

---
--
-- @prop AsyncProcessingTime: qword - The time that it has been processing in milliseconds

---
--
-- @prop OnActivate: function(memoryrecord,before,currentstate):boolean - The function to call when the memoryrecord will change (or changed) Active to true. If before is true, not returning true will cause the activation to stop.

---
--
-- @prop OnDeactivate: function(memoryrecord,before,currentstate):boolean - The function to call when the memoryrecord will change (or changed) Active to false. If before is true, not returning true will cause the deactivation to stop.

---
--
-- @prop OnDestroy: function() - Called when the memoryrecord is destroyed.

---
--
-- @prop OnGetDisplayValue: function(memoryrecord,valuestring):boolean,string - This function gets called when rendering the value of a memory record. Return true and a new string to override the value shown

---
--
-- @prop DontSave: boolean - Don't save this memoryrecord and it's children


---
--
-- @function getDescription()

---
--
-- @function setDescription()

---
--
-- @function getAddress() : Returns the interpretable addressstring of this record. If it is a pointer, it returns a second result as a table filled with the offsets

---
--
-- @function setAddress(string) : Sets the interpretable address string, and if offsets are provided make it a pointer


---
--
-- @function getOffsetCount(): Returns the number of offsets for this memoryrecord

---
--
-- @function setOffsetCount(integer): Lets you set the number of offsets

---
--
-- @function getOffset(index) : Gets the offset at the given index

---
--
-- @function setOffset(index, value) : Sets the offset at the given index

---
--
-- @function getCurrentAddress(): Returns the current address as an integer (the final result of the interpretable address and pointer offsets)

---
--
-- @function appendToEntry(memrec): Appends the current memory record to the given memory record

---
--
-- @function getHotkey(index): Returns the hotkey from the hotkey array

---
--
-- @function getHotkeyByID(integer): Returns the hotkey with the given id

---
--
-- @function reinterpret()

---
--
-- @function createHotkey({keys}, action, value OPTIONAL): Returns a hotkey object

---
--
-- @function disableWithoutExecute(): Sets the entry to disabled without executing the disable section
